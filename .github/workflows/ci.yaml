name: build and containerize

on:
  push:
    branches:
    - main
    paths:
    - src/main/**
    - Dockerfile
    - pom.xml
  pull_request:
    branches:
    - main
    paths:
    - src/main/**
    - Dockerfile
    - pom.xml

permissions:
  id-token: write
  contents: read

env:
  ACR_NAME: ${{ secrets.ACR_NAME }}
  SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
  SONAR_HOST_URL: ${{ secrets.SONAR_HOST_URL }}
  AZURE_SUBSCRIPTION_ID: ${{ secrets.AZURE_SUBSCRIPTION_ID }}
  AZURE_TENANT_ID: ${{ secrets.AZURE_TENANT_ID }}
  AZURE_CLIENT_ID: ${{ secrets.AZURE_CLIENT_ID }}
  AZURE_CLIENT_SECRET: ${{ secrets.CLIENT_SECRET }}
  CD_REPO: git@github.com:Cjay13/user-management-cd.git
  CD_BRANCH: main
  VALUES_FILE: user-management-helm/values.yaml
  IMAGE_NAME: "user-management"
  

jobs:
  build:
    name: Build and Sonar Scan
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Install JDK 17
        uses: actions/setup-java@v4
        with:
          java-version: '17'
          distribution: 'temurin'

      - name: Cache local Maven repository
        uses: actions/cache@v4
        with:
          path: ~/.m2/repository
          key: ${{ runner.os }}-maven-${{ hashFiles('**/pom.xml') }}
          restore-keys: |
            ${{ runner.os }}-maven-

      - name: Build with Maven
        run: mvn clean install -DskipTests

      # - name: SonarQube Scan
      #   uses: SonarSource/sonarqube-scan-action@v5.0.0
      #   with:
      #     projectBaseDir: .
      #     args: >
      #       -Dsonar.organization=cjay-practice-projects
      #       -Dsonar.projectKey=cjay-practice-projects_ecom-usermanagement
      #       -Dsonar.python.coverage.reportPaths=coverage.xml
      #       -Dsonar.sources=src/main/java
      #       -Dsonar.java.binaries=target/classes
      #       -Dsonar.tests=src/test/java
      #       -Dsonar.test.exclusions=tests/**
      #       -Dsonar.verbose=true
      #   env:
      #     SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
      #     SONAR_HOST_URL: ${{ secrets.SONAR_HOST_URL }}

      - name: Login to Azure
        id: login-azure
        uses: azure/login@v1
          with:
            client-id: ${{ env.AZURE_CLIENT_ID }}
            tenant-id: ${{ env.AZURE_TENANT_ID }}
            subscription-id: ${{ env.AZURE_SUBSCRIPTION_ID }}

      - name: Login to ACR
        run: |
          az acr login --name ${{ env.ACR_NAME }}

      - name: Set Commit SHA
        run: echo "COMMIT_SHA=${GITHUB_SHA::7}" >> $GITHUB_ENV

      - name: Docker Build
        run: |
          docker build -t ${{ env.ACR_NAME }}.azureacr.io/${{ env.IMAGE_NAME }}:${{ env.COMMIT_SHA }} .

      - name: debug
        run: docker images

      # - name: Run Trivy vulnerability scanner
      #   uses: aquasecurity/trivy-action@0.28.0
      #   with:
      #     image-ref: "${{ env.ACR_NAME }}.azureacr.io/${{ env.IMAGE_NAME }}:${{ env.COMMIT_SHA }}"
      #     format: 'table'
      #     exit-code: '1'
      #     ignore-unfixed: true
      #     vuln-type: 'os,library'
      #     severity: 'CRITICAL,HIGH'

      - name: Push Docker image to ACR
        run: |
          docker push ${{ env.ACR_NAME }}.azureacr.io/${{ env.IMAGE_NAME }}:${{ env.COMMIT_SHA }}

      # - name: Setup SSH Key
      #   run: |
      #     mkdir -p ~/.ssh
      #     ls -a ~/.ssh
      #     echo "${{ secrets.SSH_PVT_KEY }}" > ~/.ssh/id_ed25519
      #     chmod 600 ~/.ssh/id_ed25519
      #     ssh-keyscan github.com >> ~/.ssh/known_hosts

      # - name: Update values.yaml
      #   run: |
  
      #     IMAGE_TAG=$COMMIT_SHA
                  
      #     git clone $CD_REPO cd-repo
      #     cd cd-repo
          
      #     git config --global user.name "github-actions"
      #     git config --global user.email "github-actions@github.com"

      #     sed -i "s|tag: .*|tag: \"${IMAGE_TAG}\"|" $VALUES_FILE

      #     git add $VALUES_FILE
      #     git commit -m "Updated image tag to ${IMAGE_TAG}"
      #     git push origin $CD_BRANCH